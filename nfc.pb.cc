// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "external/aic/nfcd/nfc.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* nfcPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  nfcPayload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_external_2faic_2fnfcd_2fnfc_2eproto() {
  protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "external/aic/nfcd/nfc.proto");
  GOOGLE_CHECK(file != NULL);
  nfcPayload_descriptor_ = file->message_type(0);
  static const int nfcPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, tittle_),
  };
  nfcPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      nfcPayload_descriptor_,
      nfcPayload::default_instance_,
      nfcPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(nfcPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(nfcPayload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_external_2faic_2fnfcd_2fnfc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    nfcPayload_descriptor_, &nfcPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_external_2faic_2fnfcd_2fnfc_2eproto() {
  delete nfcPayload::default_instance_;
  delete nfcPayload_reflection_;
}

void protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033external/aic/nfcd/nfc.proto\"F\n\nnfcPayl"
    "oad\022\014\n\004type\030\001 \001(\r\022\014\n\004lang\030\002 \001(\r\022\014\n\004text\030"
    "\003 \001(\t\022\016\n\006tittle\030\004 \001(\t", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "external/aic/nfcd/nfc.proto", &protobuf_RegisterTypes);
  nfcPayload::default_instance_ = new nfcPayload();
  nfcPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_external_2faic_2fnfcd_2fnfc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_external_2faic_2fnfcd_2fnfc_2eproto {
  StaticDescriptorInitializer_external_2faic_2fnfcd_2fnfc_2eproto() {
    protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto();
  }
} static_descriptor_initializer_external_2faic_2fnfcd_2fnfc_2eproto_;


// ===================================================================

const ::std::string nfcPayload::_default_text_;
const ::std::string nfcPayload::_default_tittle_;
#ifndef _MSC_VER
const int nfcPayload::kTypeFieldNumber;
const int nfcPayload::kLangFieldNumber;
const int nfcPayload::kTextFieldNumber;
const int nfcPayload::kTittleFieldNumber;
#endif  // !_MSC_VER

nfcPayload::nfcPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void nfcPayload::InitAsDefaultInstance() {
}

nfcPayload::nfcPayload(const nfcPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void nfcPayload::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  lang_ = 0u;
  text_ = const_cast< ::std::string*>(&_default_text_);
  tittle_ = const_cast< ::std::string*>(&_default_tittle_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

nfcPayload::~nfcPayload() {
  SharedDtor();
}

void nfcPayload::SharedDtor() {
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (tittle_ != &_default_tittle_) {
    delete tittle_;
  }
  if (this != default_instance_) {
  }
}

void nfcPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* nfcPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return nfcPayload_descriptor_;
}

const nfcPayload& nfcPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto();  return *default_instance_;
}

nfcPayload* nfcPayload::default_instance_ = NULL;

nfcPayload* nfcPayload::New() const {
  return new nfcPayload;
}

void nfcPayload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    lang_ = 0u;
    if (_has_bit(2)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    if (_has_bit(3)) {
      if (tittle_ != &_default_tittle_) {
        tittle_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool nfcPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lang;
        break;
      }
      
      // optional uint32 lang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lang_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tittle;
        break;
      }
      
      // optional string tittle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tittle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tittle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tittle().data(), this->tittle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void nfcPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 lang = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lang(), output);
  }
  
  // optional string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  // optional string tittle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tittle().data(), this->tittle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tittle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* nfcPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 lang = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lang(), target);
  }
  
  // optional string text = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  // optional string tittle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tittle().data(), this->tittle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tittle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int nfcPayload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 lang = 2;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lang());
    }
    
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string tittle = 4;
    if (has_tittle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tittle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void nfcPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const nfcPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const nfcPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void nfcPayload::MergeFrom(const nfcPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_lang(from.lang());
    }
    if (from._has_bit(2)) {
      set_text(from.text());
    }
    if (from._has_bit(3)) {
      set_tittle(from.tittle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void nfcPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nfcPayload::CopyFrom(const nfcPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nfcPayload::IsInitialized() const {
  
  return true;
}

void nfcPayload::Swap(nfcPayload* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lang_, other->lang_);
    std::swap(text_, other->text_);
    std::swap(tittle_, other->tittle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata nfcPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = nfcPayload_descriptor_;
  metadata.reflection = nfcPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
