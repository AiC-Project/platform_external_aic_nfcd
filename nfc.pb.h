// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external/aic/nfcd/nfc.proto

#ifndef PROTOBUF_external_2faic_2fnfcd_2fnfc_2eproto__INCLUDED
#define PROTOBUF_external_2faic_2fnfcd_2fnfc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto();
void protobuf_AssignDesc_external_2faic_2fnfcd_2fnfc_2eproto();
void protobuf_ShutdownFile_external_2faic_2fnfcd_2fnfc_2eproto();

class nfcPayload;

// ===================================================================

class nfcPayload : public ::google::protobuf::Message {
 public:
  nfcPayload();
  virtual ~nfcPayload();
  
  nfcPayload(const nfcPayload& from);
  
  inline nfcPayload& operator=(const nfcPayload& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const nfcPayload& default_instance();
  
  void Swap(nfcPayload* other);
  
  // implements Message ----------------------------------------------
  
  nfcPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nfcPayload& from);
  void MergeFrom(const nfcPayload& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 lang = 2;
  inline bool has_lang() const;
  inline void clear_lang();
  static const int kLangFieldNumber = 2;
  inline ::google::protobuf::uint32 lang() const;
  inline void set_lang(::google::protobuf::uint32 value);
  
  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  
  // optional string tittle = 4;
  inline bool has_tittle() const;
  inline void clear_tittle();
  static const int kTittleFieldNumber = 4;
  inline const ::std::string& tittle() const;
  inline void set_tittle(const ::std::string& value);
  inline void set_tittle(const char* value);
  inline void set_tittle(const char* value, size_t size);
  inline ::std::string* mutable_tittle();
  
  // @@protoc_insertion_point(class_scope:nfcPayload)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 lang_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  ::std::string* tittle_;
  static const ::std::string _default_tittle_;
  friend void  protobuf_AddDesc_external_2faic_2fnfcd_2fnfc_2eproto();
  friend void protobuf_AssignDesc_external_2faic_2fnfcd_2fnfc_2eproto();
  friend void protobuf_ShutdownFile_external_2faic_2fnfcd_2fnfc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static nfcPayload* default_instance_;
};
// ===================================================================


// ===================================================================

// nfcPayload

// optional uint32 type = 1;
inline bool nfcPayload::has_type() const {
  return _has_bit(0);
}
inline void nfcPayload::clear_type() {
  type_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 nfcPayload::type() const {
  return type_;
}
inline void nfcPayload::set_type(::google::protobuf::uint32 value) {
  _set_bit(0);
  type_ = value;
}

// optional uint32 lang = 2;
inline bool nfcPayload::has_lang() const {
  return _has_bit(1);
}
inline void nfcPayload::clear_lang() {
  lang_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 nfcPayload::lang() const {
  return lang_;
}
inline void nfcPayload::set_lang(::google::protobuf::uint32 value) {
  _set_bit(1);
  lang_ = value;
}

// optional string text = 3;
inline bool nfcPayload::has_text() const {
  return _has_bit(2);
}
inline void nfcPayload::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& nfcPayload::text() const {
  return *text_;
}
inline void nfcPayload::set_text(const ::std::string& value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void nfcPayload::set_text(const char* value) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void nfcPayload::set_text(const char* value, size_t size) {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nfcPayload::mutable_text() {
  _set_bit(2);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// optional string tittle = 4;
inline bool nfcPayload::has_tittle() const {
  return _has_bit(3);
}
inline void nfcPayload::clear_tittle() {
  if (tittle_ != &_default_tittle_) {
    tittle_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& nfcPayload::tittle() const {
  return *tittle_;
}
inline void nfcPayload::set_tittle(const ::std::string& value) {
  _set_bit(3);
  if (tittle_ == &_default_tittle_) {
    tittle_ = new ::std::string;
  }
  tittle_->assign(value);
}
inline void nfcPayload::set_tittle(const char* value) {
  _set_bit(3);
  if (tittle_ == &_default_tittle_) {
    tittle_ = new ::std::string;
  }
  tittle_->assign(value);
}
inline void nfcPayload::set_tittle(const char* value, size_t size) {
  _set_bit(3);
  if (tittle_ == &_default_tittle_) {
    tittle_ = new ::std::string;
  }
  tittle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* nfcPayload::mutable_tittle() {
  _set_bit(3);
  if (tittle_ == &_default_tittle_) {
    tittle_ = new ::std::string;
  }
  return tittle_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_external_2faic_2fnfcd_2fnfc_2eproto__INCLUDED
